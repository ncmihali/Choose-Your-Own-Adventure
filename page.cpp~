#include <fstream>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Page {
 private:
  int page_num;
  vector<string> choices;
  vector<string> story;

 public:
  Page() : page_num(0) {}
  Page(const string & file_name);
  bool check_errors(const string & file_name);
  void print_page();
};

void Page::print_page() {
  for (size_t i = 0; i < story.size(); i++) {
    cout << story[i] << "\n";
  }

  if (choices[0] == "WIN") {
    cout << "congratulations! You have won. Horray!\n";
    return;
  }
  else if (choices[0] == "LOSE") {
    cout << "Sorry, you have lost. Better luck next time!\n";
    return;
  }
  cout << "\n"
       << "What would you like to do?\n\n";

  for (size_t i = 0; i < choices.size(); i++) {
    cout << " " << choices[i].substr(0, choices[i].find(':')) << ". "
         << choices[i].substr(choices[i].find(':') + 1) << "\n";
  }
}

Page::Page(const string & file_name) {
  if (check_errors(file_name) == true)
    perror("error in file\n");

  ifstream file(file_name);
  string line;
  int check_story = 0;
  while (getline(file, line)) {
    if (check_story == 1) {
      story.push_back(line);
    }
    else {
      if (line[0] == '#') {
        check_story = 1;
        continue;
      }
      choices.push_back(line);
    }
  }
}

bool Page::check_errors(const string & file_name) {
  int check = 1;            // used to check all three requirements of an input
  int win_loose_count = 0;  // checks to see if win or loose is itself
  int win_loose_flag = 0;
  ifstream file(file_name);
  if (!file.is_open())
    perror("cant open file\n");
  else {
    string line;
    while (getline(file, line)) {
      if (check == 1) {  // FIRST PART OF TEXT FILE
        if (win_loose_count == 1 && win_loose_flag == 1) {
          if (line[0] == '#') {
            check = 2;
            continue;
          }
          else {
            perror("invalid format for #\n");
            return true;
          }
        }
        else if (line.compare("WIN") == 0) {
          if (win_loose_count == 0) {
            win_loose_count += 1;
            win_loose_flag = 1;
            continue;
          }
          else {
            perror("too many WIN or LOSE\n");
            return true;
          }
        }
        else if (line.compare("LOSE") == 0) {
          if (win_loose_count == 0) {
            win_loose_count += 1;
            win_loose_flag = 1;
            continue;
          }
          else {
            perror("too many WIN or LOSE\n");
            return true;
          }
        }

        else if ((line[0] < '0' || line[0] > '9') && line[0] != '#') {
          perror("invalid number format\n");
          return true;
        }
        else {
          win_loose_count += 1;
          for (size_t i = 0; line[i] != '\0'; i++) {
            if (line[i] >= '0' && line[i] <= '9') {
              continue;
            }
            else {
              if (line[i] == ':')
                break;
              else {
                if (line[0] == '#' && win_loose_count >= 1)
                  return false;
                perror("invalid number format and colon\n");
                return true;
              }
            }
          }
          continue;
        }
      }
    }
  }
  return false;
}
